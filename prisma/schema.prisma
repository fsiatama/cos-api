// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  password       String
  name           String
  roles          UserRole[]
  additionalInfo Json?      @db.Json
}

model Role {
  id            String           @id @default(uuid())
  name          String           @unique
  permissions   RolePermission[]
  users         UserRole[]
  roleAttibutes RoleAttibute[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RoleAttibute {
  id        String       @id @default(uuid())
  fieldName String
  required  Boolean
  dataType  DataTypeEnum
  roleId    String
  role      Role         @relation(fields: [roleId], references: [id])
}

model Permission {
  id      String           @id @default(uuid())
  action  String
  subject String
  title   String
  icon    String
  route   String
  roles   RolePermission[]

  @@unique([action, subject])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Student {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  contracts Contract[]
  payments  Payment[]
}

model Contract {
  id        String       @id @default(uuid())
  studentId String
  student   Student      @relation(fields: [studentId], references: [id])
  year      Int
  semester  SemesterEnum

  @@unique([studentId, year, semester])
}

model Term {
  id                 String                          @id @default(uuid())
  months             Int
  monthlyRate        Float
  annualInterestRate Float
  monthlyAmount      Float
  latePaymentFee     Float
  beginToApplyDate   DateTime
  cutOffDay          Int
  paymentDay         Int
  uinsert            User                            @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  uinsertId          String
  createdAt          DateTime                        @default(now())
  contractId         String
  contract           Contract                        @relation(fields: [loanId], references: [id], onDelete: Cascade)
  paymentAscConcepts TermPaymentAssociatedConcepts[]
}

model Concept {
  id                 String                          @id @default(uuid())
  name               String                          @unique
  conceptType        ConceptTypeEnum                 @default(CREDIT)
  createdAt          DateTime                        @default(now())
  transactions       Transaction[]
  paymentAscConcepts TermPaymentAssociatedConcepts[]
}

model TermPaymentAssociatedConcepts {
  id        String  @id @default(uuid())
  amount    Float
  concept   Concept @relation(fields: [conceptId], references: [id], onDelete: Restrict)
  conceptId String
  term      Term    @relation(fields: [termId], references: [id], onDelete: Cascade)
  termId    String
}

enum SemesterEnum {
  FALL
  WINTER
  SPRING
  SUMMER
}

enum DataTypeEnum {
  NUMBER
  STRING
  BOOLEAN
  DATE
  PHONENUMBER
  IP
}

enum ConceptTypeEnum {
  DEBIT
  CREDIT
}
