// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  name             String
  roles            UserRole[]
  additionalInfo   Json?             @db.Json
  student          Student?
  terms            Term[]
  invoices         Invoice[]
  contracts        Contract[]
  contractConcepts ContractConcept[]
}

model Role {
  id            String           @id @default(uuid())
  name          String           @unique
  permissions   RolePermission[]
  users         UserRole[]
  roleAttibutes RoleAttibute[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RoleAttibute {
  id        String       @id @default(uuid())
  fieldName String
  required  Boolean
  dataType  DataTypeEnum
  roleId    String
  role      Role         @relation(fields: [roleId], references: [id])
}

model Permission {
  id      String           @id @default(uuid())
  action  String
  subject String
  title   String
  icon    String
  route   String
  roles   RolePermission[]

  @@unique([action, subject])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Student {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  contracts Contract[]
  invoices  Invoice[]
}

model Contract {
  id               String            @id @default(uuid())
  studentId        String
  student          Student           @relation(fields: [studentId], references: [id])
  year             Int
  semester         SemesterEnum
  terms            Term[]
  contractConcepts ContractConcept[]
  invoices         Invoice[]
  uinsert          User              @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  uinsertId        String
  createdAt        DateTime          @default(now())

  @@unique([studentId, year, semester])
}

model Term {
  id               String   @id @default(uuid())
  months           Int
  monthlyRate      Float
  latePaymentFee   Float
  beginToApplyDate DateTime
  paymentDay       Int
  contractId       String
  contract         Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  uinsert          User     @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  uinsertId        String
  createdAt        DateTime @default(now())
}

model ContractConcept {
  id          String   @id @default(uuid())
  amount      Float
  description String?
  contractId  String
  contract    Contract @relation(fields: [contractId], references: [id])
  conceptId   String
  concept     Concept  @relation(fields: [conceptId], references: [id])
  uinsert     User     @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  uinsertId   String
  createdAt   DateTime @default(now())
}

model Invoice {
  id            String            @id @default(uuid())
  invoiceNumber String
  invoiceDate   DateTime          @default(now())
  status        InvoiceStatusEnum
  invoiceDetail InvoiceDetail[]
  studentId     String
  student       Student           @relation(fields: [studentId], references: [id])
  contractId    String?
  contract      Contract?         @relation(fields: [contractId], references: [id])
  uinsertId     String
  uinsert       User              @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  createdAt     DateTime          @default(now())
  Payment       Payment[]
}

model InvoiceDetail {
  id          String  @id @default(uuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  amount      Float
  description String?
  conceptId   String
  concept     Concept @relation(fields: [conceptId], references: [id])
}

model PaymentMethod {
  id       String    @id @default(uuid())
  name     String
  payments Payment[]
}

model Payment {
  id              String        @id @default(uuid())
  amount          Int
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  invoiceId       String
  invoice         Invoice       @relation(fields: [invoiceId], references: [id])
}

model Concept {
  id               String            @id @default(uuid())
  name             String            @unique
  conceptType      ConceptTypeEnum   @default(CREDIT)
  createdAt        DateTime          @default(now())
  invoiceDetails   InvoiceDetail[]
  contractConcepts ContractConcept[]
}

enum SemesterEnum {
  FALL
  WINTER
  SPRING
  SUMMER
}

enum DataTypeEnum {
  NUMBER
  STRING
  BOOLEAN
  DATE
  PHONENUMBER
  IP
}

enum ConceptTypeEnum {
  DEBIT
  CREDIT
}

enum InvoiceStatusEnum {
  DRAFT
  PENDING
  CANCELLED
  APPROVED
}
