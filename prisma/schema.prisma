// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String
  name                String
  roles               UserRole[]
  additionalInfo      Json?
  applicant           Applicant?
  invoices            Invoice[]
  conceptPriceHistory ConceptPriceHistory[]
  subconcepts         Subconcept[]
  transactions        Transaction[]
}

model Role {
  id            String           @id @default(uuid())
  name          String           @unique
  permissions   RolePermission[]
  users         UserRole[]
  roleAttibutes RoleAttibute[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RoleAttibute {
  id        String       @id @default(uuid())
  fieldName String
  required  Boolean
  dataType  DataTypeEnum
  roleId    String
  role      Role         @relation(fields: [roleId], references: [id])
}

model Permission {
  id      String           @id @default(uuid())
  action  String
  subject String
  title   String
  icon    String
  route   String
  roles   RolePermission[]

  @@unique([action, subject])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Applicant {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  invoices  Invoice[]
  createdAt DateTime  @default(now())
}

model Invoice {
  id            String            @id @default(uuid())
  invoiceNumber String
  invoiceDate   DateTime          @default(now())
  status        InvoiceStatusEnum
  invoiceDetail InvoiceDetail[]
  applicantId   String
  applicant     Applicant         @relation(fields: [applicantId], references: [id])
  uinsertId     String
  uinsert       User              @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  createdAt     DateTime          @default(now())
  payments      Payment[]
  transactions  Transaction[]
}

model InvoiceDetail {
  id             String              @id @default(uuid())
  invoiceId      String
  invoice        Invoice             @relation(fields: [invoiceId], references: [id])
  amount         Float
  qty            Float
  description    String?
  conceptPriceId String
  conceptPrice   ConceptPriceHistory @relation(fields: [conceptPriceId], references: [id])
}

model PaymentMethod {
  id       String    @id @default(uuid())
  name     String
  payments Payment[]
}

model Payment {
  id              String        @id @default(uuid())
  amount          Int
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  invoiceId       String
  invoice         Invoice       @relation(fields: [invoiceId], references: [id])
}

model Concept {
  id                  String                @id @default(uuid())
  name                String                @unique
  conceptType         ConceptTypeEnum       @default(CREDIT)
  isToThirdParty      Boolean               @default(false)
  isPercentage        Boolean               @default(false)
  isChild             Boolean               @default(false)
  createdAt           DateTime              @default(now())
  conceptPriceHistory ConceptPriceHistory[]
  transactions        Transaction[]
  subconcepts         Subconcept[]          @relation("ChildConcept")
  parentConcepts      Subconcept[]          @relation("ParentConcept")
}

model Subconcept {
  id            String   @id @default(uuid())
  parentId      String
  childId       String
  parentConcept Concept  @relation("ChildConcept", fields: [parentId], references: [id])
  concept       Concept  @relation("ParentConcept", fields: [childId], references: [id])
  amount        Float
  createdAt     DateTime @default(now())
  uinsertId     String
  uinsert       User     @relation(fields: [uinsertId], references: [id], onDelete: Restrict)

  @@unique([parentId, childId])
}

model ConceptPriceHistory {
  id             String          @id @default(uuid())
  conceptId      String
  concept        Concept         @relation(fields: [conceptId], references: [id])
  price          Float
  effectiveDate  DateTime
  createdAt      DateTime        @default(now())
  uinsertId      String
  uinsert        User            @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  invoiceDetails InvoiceDetail[]
}

model Transaction {
  id              String   @id @default(uuid())
  invoiceId       String
  invoice         Invoice  @relation(fields: [invoiceId], references: [id])
  conceptId       String
  concept         Concept  @relation(fields: [conceptId], references: [id])
  amount          Float
  transactionDate DateTime
  createdAt       DateTime @default(now())
  uinsertId       String
  uinsert         User     @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
}

enum SemesterEnum {
  FALL
  WINTER
  SPRING
  SUMMER
}

enum DataTypeEnum {
  NUMBER
  STRING
  BOOLEAN
  DATE
  PHONENUMBER
  IP
}

enum ConceptTypeEnum {
  DEBIT
  CREDIT
}

enum InvoiceStatusEnum {
  DRAFT
  PENDING
  CANCELLED
  APPROVED
}
